"C:\\Users\\Rising Star\\Downloads\\rprog_data_specdata"
source("C:/Users/Rising Star/Downloads/rprog_data_specdata/pollutantmean.R")
source("C:/Users/Rising Star/Downloads/rprog_data_specdata/pollutantmean.R")
"C:\\Users\\Rising Star\\Downloads\\rprog_data_specdata"
pollutantmean <- function(directory, pollutant, id = 1:332) {
# Create a vector to store pollutant values
pollutant_data <- c()
# Loop through each monitor ID
for (monitor in id) {
# Construct file path, ensuring correct formatting (e.g., "001.csv", "010.csv", etc.)
file_name <- sprintf("%03d.csv", monitor)
file_path <- file.path(directory, file_name)
# Read the data from CSV file
if (file.exists(file_path)) {
data <- read.csv(file_path)
# Extract pollutant values and ignore NAs
pollutant_data <- c(pollutant_data, data[[pollutant]])
}
}
# Return the mean, ignoring NA values
mean(pollutant_data, na.rm = TRUE)
}
# Example usage
pollutantmean("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", "sulfate", 1:10)
pollutantmean("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", "nitrate", 70:72)
pollutantmean("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", "sulfate", 23)
complete <- function(directory, id = 1:332) {
# Initialize an empty data frame to store results
results <- data.frame(id = integer(), nobs = integer())
# Loop through each monitor ID
for (monitor in id) {
# Construct file path (e.g., "001.csv", "010.csv", etc.)
file_name <- sprintf("%03d.csv", monitor)
file_path <- file.path(directory, file_name)
# Read the data if file exists
if (file.exists(file_path)) {
data <- read.csv(file_path)
# Count complete cases (rows with no NA values)
num_complete_cases <- sum(complete.cases(data))
# Append results to data frame
results <- rbind(results, data.frame(id = monitor, nobs = num_complete_cases))
}
}
return(results)
}
# Example usage
complete("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 1:10)
complete("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", c(2, 4, 8, 10, 12))
complete("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 30:25)
corr <- function(directory, threshold = 0) {
# Initialize an empty vector to store correlation values
correlation_values <- numeric(0)
# List all the files in the directory
files <- list.files(directory, full.names = TRUE)
# Loop through each file in the directory
for (file in files) {
# Read the data
data <- read.csv(file)
# Count complete cases
complete_cases <- complete.cases(data)
# If the number of complete cases is greater than the threshold
if (sum(complete_cases) > threshold) {
# Calculate the correlation between sulfate and nitrate for complet
# Example usage
corr("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 150)
corr("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 400)
corr("C:/Users/Rising Star/Downloads/rprog_data_specdata/specdata", 0)
corr <- function(directory, threshold = 0) {
# Initialize an empty vector to store correlation values
correlation_values <- numeric(0)
# List all the files in the directory
files <- list.files(directory, full.names = TRUE)
# Loop through each file in the directory
for (file in files) {
# Read the data
data <- read.csv(file)
# Count complete cases
complete_cases <- complete.cases(data)
# If the number of complete cases is greater than the threshold
if (sum(complete_cases) > threshold) {
# Calculate the correlation between sulfate and nitrate for complete cases
correlation_value <- cor(data$sulfate[complete_cases], data$nitrate[complete_cases])
# Append the correlation value to the result vector
correlation_values <- c(correlation_values, correlation_value)
}
}
# Return the correlation values
return(correlation_values)
}
q()
"C:\\Users\\Rising Star\\Desktop"
# Step 1: Read the outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Step 1: Read the outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
"C:\\Users\\Rising Star\\Desktop"
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Validate state
if (!(state %in% unique(data$State))) {
stop("invalid state")
}
## Define valid outcomes and their respective column indices
outcome_cols <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
## Validate outcome
if (!(outcome %in% names(outcome_cols))) {
stop("invalid outcome")
}
## Filter data for the given state
state_data <- data[data$State == state, ]
## Convert outcome column to numeric (suppress warnings for NA)
col_index <- outcome_cols[[outcome]]
state_data[, col_index] <- suppressWarnings(as.numeric(state_data[, col_index]))
## Remove rows with NA values in the outcome column
state_data <- state_data[!is.na(state_data[, col_index]), ]
## Find the hospital with the lowest mortality rate
min_value <- min(state_data[, col_index])
best_hospitals <- state_data[state_data[, col_index] == min_value, "Hospital.Name"]
## Return hospital name (alphabetically first in case of tie)
return(sort(best_hospitals)[1])
}
source("best.R")
"C:\\Users\\Rising Star\\Desktop"
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Validate state
if (!(state %in% unique(data$State))) {
stop("invalid state")
}
## Define valid outcomes and their respective column indices
outcome_cols <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
## Validate outcome
if (!(outcome %in% names(outcome_cols))) {
stop("invalid outcome")
}
## Filter data for the given state
state_data <- data[data$State == state, ]
## Convert outcome column to numeric (suppress warnings for NA)
col_index <- outcome_cols[[outcome]]
state_data[, col_index] <- suppressWarnings(as.numeric(state_data[, col_index]))
## Remove rows with NA values in the outcome column
state_data <- state_data[!is.na(state_data[, col_index]), ]
## Find the hospital with the lowest mortality rate
min_value <- min(state_data[, col_index])
best_hospitals <- state_data[state_data[, col_index] == min_value, "Hospital.Name"]
## Return hospital name (alphabetically first in case of tie)
return(sort(best_hospitals)[1])
}
source("best.R")
source("best.R")
setwd("C:/Users/Rising Star/Desktop/UCI HAR Dataset")
getwd()
list.files()
features <- read.table("features.txt", header = FALSE)
head(features)
X_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
subject_train <- read.table("train/subject_train.txt")
X_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
activity_labels <- read.table("activity_labels.txt", header = FALSE)
# Combine subject, activity, and feature data
train_data <- cbind(subject_train, y_train, X_train)
test_data <- cbind(subject_test, y_test, X_test)
# Merge training and test sets
merged_data <- rbind(train_data, test_data)
# Assign column names
colnames(merged_data) <- c("Subject", "Activity", as.character(features$V2))
# Select columns with mean() or std()
selected_columns <- grep("-(mean|std)\\(\\)", features$V2)
tidy_data <- merged_data[, c(1, 2, selected_columns + 2)]  # Adjust index
tidy_data$Activity <- factor(tidy_data$Activity,
levels = activity_labels$ID,
labels = activity_labels$Activity)
# Clean column names
names(tidy_data) <- gsub("^t", "Time", names(tidy_data))
names(tidy_data) <- gsub("^f", "Frequency", names(tidy_data))
names(tidy_data) <- gsub("Acc", "Accelerometer", names(tidy_data))
names(tidy_data) <- gsub("Gyro", "Gyroscope", names(tidy_data))
names(tidy_data) <- gsub("Mag", "Magnitude", names(tidy_data))
names(tidy_data) <- gsub("BodyBody", "Body", names(tidy_data))
final_data <- tidy_data %>%
group_by(Subject, Activity) %>%
summarise_all(mean)
install.packages("dplyr")  # Run this only once to install the package
library(dplyr)  # Load the package into R
final_data <- tidy_data %>%
group_by(Subject, Activity) %>%
summarise_all(mean)
View(activity_labels)
View(features)
View(final_data)
View(merged_data)
View(subject_train)
View(activity_labels)
View(activity_labels)
View(features)
View(final_data)
View(activity_labels)
View(features)
View(merged_data)
View(subject_test)
View(subject_train)
View(test_data)
View(tidy_data)
View(train_data)
View(X_test)
View(X_train)
View(y_test)
View(y_train)
